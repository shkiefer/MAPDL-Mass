allsel
finish
/post1

! create / modify components / named selections 
! if non-structral mass is applied to a named selection select all elements on nodes of that component and re-define the component 
! cmsel,s,my_named_selection ! select named selection defined in mechanical
! nsle,s ! select all nodes on selected elements
! esln,1 ! select all elements using selected nodes if all of the element nodes are selected
! cm,my_named_selection,elem ! re-define component now with non-structural mass

nCMs = 2

f_name = 'my_mass'
*DIM, cms, STRING, 100, nCMs
cms(1,1) = 'my_comp_1'
cms(1,2) = 'my_comp_2'

*DIM, css, STRING, 100, nCMs
css(1,1) = 'my_cs_1'
css(1,2) = 'my_cs_2'

ALLSEL
cm,total,elem

*cfopen, %_wb_userfiles_dir(1)%%f_name%, txt

*vwrite,'Component','CS_Name','CS_ID','mass_X','mass_Y','mass_Z','Ics_xx','Ics_yy','Ics_zz','Ics_xy','Ics_xz','Ics_yx','Ics_yz','Ics_zx','Ics_zy'
%12C,%12C,%12C,%12C,%12C,%12C,%12C,%12C,%12C,%12C,%12C,%12C,%12C,%12C,%12C

*dim,outVars,array,nCMs,13

finish
/filname, mass

*do,j,1,nCMs
	fini
  	/prep7
    
  	! get cs location and angles
	outVars(j,1)=%css(1,j)%
  	*GET,cs_x,CDSY,%css(1,j)%,LOC,X
	*GET,cs_y,CDSY,%css(1,j)%,LOC,Y
	*GET,cs_z,CDSY,%css(1,j)%,LOC,Z
	*GET,cs_xy,CDSY,%css(1,j)%,ANG,XY
	*GET,cs_yz,CDSY,%css(1,j)%,ANG,YZ
	*GET,cs_zx,CDSY,%css(1,j)%,ANG,ZX
	
	fini
	/sol

	cmsel, s, %cms(1,j)%
	nsle,s

	irlf,-1 
	psolve,elform 
	psolve,elprep 

  	! get inertia about CG & mass
	*get, mass_x, ELEM,0,MTOT,X
	*get, mass_y, ELEM,0,MTOT,Y
	*get, mass_z, ELEM,0,MTOT,Z
	
	*get, cg_x, ELEM,0,MC,X
	*get, cg_y, ELEM,0,MC,Y
	*get, cg_z, ELEM,0,MC,Z
	
	*get, moim_x, ELEM,0,IMC,X
	*get, moim_y, ELEM,0,IMC,Y
	*get, moim_z, ELEM,0,IMC,Z
	*get, moim_xy, ELEM,0,IMC,XY
	*get, moim_yz, ELEM,0,IMC,YZ
	*get, moim_zx, ELEM,0,IMC,ZX

   	! translate inertia components to cs_mass loc
   	xg = cg_x - cs_x
   	yg = cg_y - cs_y
   	zg = cg_z - cs_z

  	Ixx_cst = moim_x+mass_x*(yg**2+zg**2)
  	Iyy_cst = moim_y+mass_y*(xg**2+zg**2)
  	Izz_cst = moim_z+mass_z*(xg**2+yg**2)
  	Ixy_cst = moim_xy+mass_x*xg*yg
  	Iyz_cst = moim_yz+mass_y*yg*zg
  	Izx_cst = moim_zx+mass_z*zg*xg
    
  	! create APDL 2D array
  	*dim,I_cst, array,3,3
  	I_cst(1,1)=Ixx_cst
  	I_cst(1,2)=Ixy_cst
  	I_cst(1,3)=Izx_cst
	I_cst(2,1)=Ixy_cst
 	I_cst(2,2)=Iyy_cst
  	I_cst(2,3)=Iyz_cst
  	I_cst(3,1)=Izx_cst
  	I_cst(3,2)=Iyz_cst
  	I_cst(3,3)=Izz_cst
    
  	! rotate inertia componets to cs_mass angles
  	! https://www.simutechgroup.com/tips-and-tricks/fea-articles/286-fea-tips-tricks-ansys-rotation-convention

  	! make transformation matrix T
  	PI=ACOS(-1)
  	c1=COS(cs_xy*PI/180.)
  	c2=COS(cs_yz*PI/180.)
  	c3=COS(cs_zx*PI/180.)
  	s1=SIN(cs_xy*PI/180.)
  	s2=SIN(cs_yz*PI/180.)
  	s3=SIN(cs_zx*PI/180.)
    
  	txx = c1*c3-s1*s2*s3
  	txy = s1*c3+c1*s2*s3
  	txz = -s3*c2
  	tyx = -s1*c2
  	tyy = c1*c2
  	tyz = s2
  	tzx = c1*s3+s1*s2*c3
  	tzy = s1*s3-c1*c3*s2
  	tzz = c2*c3
    
  	! create APDL 2D array
  	*dim,Tr, array,3,3
  	Tr(1,1)=txx
  	Tr(1,2)=txy
  	Tr(1,3)=txz
 	Tr(2,1)=tyx
  	Tr(2,2)=tyy
	Tr(2,3)=tyz
	Tr(3,1)=tzx
	Tr(3,2)=tzy
	Tr(3,3)=tzz
    
  	! copy matrices from APDL to APDL Math
  	*DMAT, I_cstm, D, IMPORT, APDL, I_cst
  	*DMAT, Trm, D, IMPORT, APDL, Tr
  	! multiply matrices using APDL math
  	*MULT,Trm,,I_cstm,, M3
  	*MULT,M3,,Trm,TRANS,I_csm
  	! copy result back to APDL
  	*EXPORT,I_csm,APDL,I_cs,1,1

	outVars(j,2) = mass_x
	outVars(j,3) = mass_y
	outVars(j,4) = mass_z
	outVars(j,5) = I_csm(1,1)
	outVars(j,6) = I_csm(2,2)
	outVars(j,7) = I_csm(3,3)
	outVars(j,8) = I_csm(1,2)
	outVars(j,9) = I_csm(1,3)
	outVars(j,10) = I_csm(2,1)
	outVars(j,11) = I_csm(2,3)
	outVars(j,12) = I_csm(3,1)
	outVars(j,13) = I_csm(3,2)

*enddo


*vwrite,cms(1,1),css(1,1),outVars(1,1),outVars(1,2),outVars(1,3),outVars(1,4),outVars(1,5),outVars(1,6),outVars(1,7),outVars(1,8),outVars(1,9),outVars(1,10),outVars(1,11),outVars(1,12),outVars(1,13)
%12c,%12c,%12.0f,%12.3e,%12.3e,%12.3e,%12.3e,%12.3e,%12.3e,%12.3e,%12.3e,%12.3e,%12.3e,%12.3e,%12.3e
*cfclos

finish
/filname
/post1
